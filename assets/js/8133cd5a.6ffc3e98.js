"use strict";(self.webpackChunka_bit_of_program=self.webpackChunka_bit_of_program||[]).push([[2607],{3724:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=o(4848),a=o(8453);const s={},i="You don't know JS",l={id:"javascript/you-dont-know-js",title:"You don't know JS",description:"github book link",source:"@site/docs/javascript/you-dont-know-js.md",sourceDirName:"javascript",slug:"/javascript/you-dont-know-js",permalink:"/a-bit-of-program/docs/javascript/you-dont-know-js",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/you-dont-know-js.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u6837\u5f0f\u914d\u7f6e",permalink:"/a-bit-of-program/docs/docusaurus/tutorial-extras/custom-style"},next:{title:"kafka",permalink:"/a-bit-of-program/docs/kafka/"}},r={},d=[{value:"Chapter 4",id:"chapter-4",level:2},{value:"Around the Global Scope",id:"around-the-global-scope",level:3},{value:"Globals Shadowing Globals",id:"globals-shadowing-globals",level:4},{value:"DOM Globals",id:"dom-globals",level:4},{value:"What&#39;s in a (Window) Name?",id:"whats-in-a-window-name",level:4},{value:"Web Workers",id:"web-workers",level:4},{value:"Node",id:"node",level:4},{value:"Others",id:"others",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"you-dont-know-js",children:"You don't know JS"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/getify/You-Dont-Know-JS/",children:"github book link"})})}),"\n",(0,t.jsx)(n.h2,{id:"chapter-4",children:"Chapter 4"}),"\n",(0,t.jsx)(n.h3,{id:"around-the-global-scope",children:"Around the Global Scope"}),"\n",(0,t.jsx)(n.h4,{id:"globals-shadowing-globals",children:"Globals Shadowing Globals"}),"\n",(0,t.jsx)(n.p,{children:"The difference between following two code snippets."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"window.something=12\nlet something=13\n\nwindow.something=12\nvar something=13\n"})}),"\n",(0,t.jsx)(n.h4,{id:"dom-globals",children:"DOM Globals"}),"\n",(0,t.jsx)(n.p,{children:"One surprising behavior in the global scope you may encounter with browser-based JS applications: a DOM element with an id attribute automatically creates a global variable that references it."}),"\n",(0,t.jsx)(n.p,{children:"Consider this markup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:'<ul id="my-todo-list">\n   <li id="first">Write a book</li>\n   ..\n</ul>\n'})}),"\n",(0,t.jsx)(n.p,{children:"And the JS for that page could include:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:'first;\n// <li id="first">..</li>\n\nwindow["my-todo-list"];\n// <ul id="my-todo-list">..</ul>\n'})}),"\n",(0,t.jsx)(n.h4,{id:"whats-in-a-window-name",children:"What's in a (Window) Name?"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:'var name = 42;\n\nconsole.log(name, typeof name);\n// "42" string\n'})}),"\n",(0,t.jsx)(n.p,{children:'But the truly surprising behavior is that even though we assigned the number 42 to name (and thus window.name), when we then retrieve its value, it\'s a string "42"! In this case, the weirdness is because name is actually a pre-defined getter/setter on the window object, which insists on its value being a string value. Yikes!'}),"\n",(0,t.jsx)(n.h4,{id:"web-workers",children:"Web Workers"}),"\n",(0,t.jsx)(n.p,{children:"Web Workers are a web platform extension on top of browser-JS behavior, which allows a JS file to run in a completely separate thread (operating system wise) from the thread that's running the main JS program."}),"\n",(0,t.jsx)(n.p,{children:"Since these Web Worker programs run on a separate thread, they're restricted in their communications with the main application thread, to avoid/limit race conditions and other complications. Web Worker code does not have access to the DOM, for example. Some web APIs are, however, made available to the worker, such as navigator."}),"\n",(0,t.jsx)(n.p,{children:"In a Web Worker, the global object reference is typically made using self:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'var studentName = "Kyle";\nlet studentID = 42;\n\nfunction hello() {\n    console.log(`Hello, ${ self.studentName }!`);\n}\n\nself.hello();\n// Hello, Kyle!\n\nself.studentID;\n// undefined\n'})}),"\n",(0,t.jsx)(n.h4,{id:"node",children:"Node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'global.studentName = "Kyle";\n\nfunction hello() {\n    console.log(`Hello, ${ studentName }!`);\n}\n\nhello();\n// Hello, Kyle!\n\nmodule.exports.hello = hello;\n'})}),"\n",(0,t.jsx)(n.h4,{id:"others",children:"Others"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const theGlobalScopeObject =\n    (new Function("return this"))();\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const theGlobalScopeObject =\n    (typeof globalThis != "undefined") ? globalThis :\n    (typeof global != "undefined") ? global :\n    (typeof window != "undefined") ? window :\n    (typeof self != "undefined") ? self :\n    (new Function("return this"))();\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var t=o(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);